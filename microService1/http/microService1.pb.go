// Code generated by WARHORSE protoc-gen-go. DO NOT EDIT EXCEPET SERVER VERSION.
// source: microService1.proto

/*
Package microService1 is a generated protocol buffer package.

It is generated from these files:

	microService1.proto

It has these top-level messages:

	Omit
	Null
	GetUserInfoReq
	GetUserInfoResp
	RpcGetUserInfoReq
	AddUserInfoReq
*/
package microService1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	"context"
	"encoding/json"
	"github.com/iooikaak/frame/config"
	"github.com/iooikaak/frame/core"
	"github.com/iooikaak/frame/protocol"
	"github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
	"github.com/opentracing/opentracing-go/log"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Omit struct {
	Errcode int32 `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
}

func (m *Omit) Reset()                    { *m = Omit{} }
func (m *Omit) String() string            { return proto.CompactTextString(m) }
func (*Omit) ProtoMessage()               {}
func (*Omit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Omit) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetUserInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id" xml:"user_id,omitempty"`
}

func (m *GetUserInfoReq) Reset()                    { *m = GetUserInfoReq{} }
func (m *GetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoReq) ProtoMessage()               {}
func (*GetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserInfoResp struct {
	Errcode int32                 `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
	Errmsg  string                `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data    *GetUserInfoResp_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty" xml:"data,omitempty"`
}

func (m *GetUserInfoResp) Reset()                    { *m = GetUserInfoResp{} }
func (m *GetUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResp) ProtoMessage()               {}
func (*GetUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserInfoResp) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *GetUserInfoResp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetUserInfoResp) GetData() *GetUserInfoResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetUserInfoResp_Data struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" xml:"name,omitempty"`
	Gender string `protobuf:"bytes,2,opt,name=gender" json:"gender,omitempty" xml:"gender,omitempty"`
	Age    int32  `protobuf:"varint,3,opt,name=age" json:"age" xml:"age,omitempty"`
	Job    string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty" xml:"job,omitempty"`
}

func (m *GetUserInfoResp_Data) Reset()                    { *m = GetUserInfoResp_Data{} }
func (m *GetUserInfoResp_Data) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResp_Data) ProtoMessage()               {}
func (*GetUserInfoResp_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *GetUserInfoResp_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetUserInfoResp_Data) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *GetUserInfoResp_Data) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *GetUserInfoResp_Data) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

type RpcGetUserInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id" xml:"user_id,omitempty"`
}

func (m *RpcGetUserInfoReq) Reset()                    { *m = RpcGetUserInfoReq{} }
func (m *RpcGetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*RpcGetUserInfoReq) ProtoMessage()               {}
func (*RpcGetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RpcGetUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type AddUserInfoReq struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" xml:"name,omitempty"`
	Gender int32  `protobuf:"varint,2,opt,name=gender" json:"gender" xml:"gender,omitempty"`
	Age    int32  `protobuf:"varint,3,opt,name=age" json:"age" xml:"age,omitempty"`
	Job    string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty" xml:"job,omitempty"`
}

func (m *AddUserInfoReq) Reset()                    { *m = AddUserInfoReq{} }
func (m *AddUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*AddUserInfoReq) ProtoMessage()               {}
func (*AddUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddUserInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddUserInfoReq) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AddUserInfoReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *AddUserInfoReq) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.

// Client API for MicroService1 service
// warhorse server version,relation to server uri.
var microService1Version = core.SrvVersionName[core.SV1]

func GetUserInfo(span opentracing.Span, ctx core.Context, in *GetUserInfoReq, opts ...core.CallOption) (*GetUserInfoResp, error) {
	task, err := core.ReadyTask(ctx, "getuserinfo", "microservice1", microService1Version, in, opts...)
	if err != nil {
		return nil, err
	}
	ext.SpanKindRPCClient.Set(span)
	ext.HTTPUrl.Set(span, fmt.Sprintf("HTTP POST : %s%s", task.RemoteAddr, task.ServeURI))
	ext.HTTPMethod.Set(span, "POST")
	_ = span.Tracer().Inject(
		span.Context(),
		opentracing.TextMap,
		opentracing.TextMapCarrier(task.Header),
	)
	back, err := core.DeliverTo(task)
	if err != nil {
		return nil, err
	}

	var out GetUserInfoResp
	if err := protocol.Unpack(back.GetFormat(), back.GetBody(), &out); err != nil {
		return nil, err
	}
	go func() {
		b, _ := json.Marshal(out)
		span.LogFields(
			log.String("event", "service: MicroService1 ,method: GetUserInfo()"),
			log.String("value", string(b)),
		)
	}()
	return &out, nil
}

func RpcGetUserInfo(span opentracing.Span, ctx core.Context, in *RpcGetUserInfoReq, opts ...core.CallOption) (*GetUserInfoResp, error) {
	task, err := core.ReadyTask(ctx, "rpcgetuserinfo", "microservice1", microService1Version, in, opts...)
	if err != nil {
		return nil, err
	}
	ext.SpanKindRPCClient.Set(span)
	ext.HTTPUrl.Set(span, fmt.Sprintf("HTTP POST : %s%s", task.RemoteAddr, task.ServeURI))
	ext.HTTPMethod.Set(span, "POST")
	_ = span.Tracer().Inject(
		span.Context(),
		opentracing.TextMap,
		opentracing.TextMapCarrier(task.Header),
	)
	back, err := core.DeliverTo(task)
	if err != nil {
		return nil, err
	}

	var out GetUserInfoResp
	if err := protocol.Unpack(back.GetFormat(), back.GetBody(), &out); err != nil {
		return nil, err
	}
	go func() {
		b, _ := json.Marshal(out)
		span.LogFields(
			log.String("event", "service: MicroService1 ,method: RpcGetUserInfo()"),
			log.String("value", string(b)),
		)
	}()
	return &out, nil
}

func AddUserInfo(span opentracing.Span, ctx core.Context, in *AddUserInfoReq, opts ...core.CallOption) (*Null, error) {
	task, err := core.ReadyTask(ctx, "adduserinfo", "microservice1", microService1Version, in, opts...)
	if err != nil {
		return nil, err
	}
	ext.SpanKindRPCClient.Set(span)
	ext.HTTPUrl.Set(span, fmt.Sprintf("HTTP POST : %s%s", task.RemoteAddr, task.ServeURI))
	ext.HTTPMethod.Set(span, "POST")
	_ = span.Tracer().Inject(
		span.Context(),
		opentracing.TextMap,
		opentracing.TextMapCarrier(task.Header),
	)
	back, err := core.DeliverTo(task)
	if err != nil {
		return nil, err
	}

	var out Null
	if err := protocol.Unpack(back.GetFormat(), back.GetBody(), &out); err != nil {
		return nil, err
	}
	go func() {
		b, _ := json.Marshal(out)
		span.LogFields(
			log.String("event", "service: MicroService1 ,method: AddUserInfo()"),
			log.String("value", string(b)),
		)
	}()
	return &out, nil
}

// MicroService1Server Server API for Hello service
type MicroService1Server interface {
	GetUserInfo(c core.Context) error

	RpcGetUserInfo(c core.Context) error

	AddUserInfo(c core.Context) error
}

// RegisterMicroService1Server register MicroService1Server with etcd info
func RegisterMicroService1Server(srv MicroService1Server, cfg *config.BaseCfg) {
	core.RegisterAndServe(&microService1ServerDesc, srv, cfg)
}

// microService1 server GetUserInfo handler
func microService1GetUserInfoHandler(srv interface{}, ctx core.Context) error {
	return srv.(MicroService1Server).GetUserInfo(ctx)
}

// microService1 server RpcGetUserInfo handler
func microService1RpcGetUserInfoHandler(srv interface{}, ctx core.Context) error {
	return srv.(MicroService1Server).RpcGetUserInfo(ctx)
}

// microService1 server AddUserInfo handler
func microService1AddUserInfoHandler(srv interface{}, ctx core.Context) error {
	return srv.(MicroService1Server).AddUserInfo(ctx)
}

// microService1 server describe
var microService1ServerDesc = core.ServiceDesc{
	Version:     microService1Version,
	ServiceName: "MicroService1",
	HandlerType: (*MicroService1Server)(nil),
	Methods: []core.MethodDesc{
		{
			A:          core.App,
			MethodName: "getuserinfo",
			Handler:    microService1GetUserInfoHandler,
		},
		{
			A:          core.Openapi,
			MethodName: "rpcgetuserinfo",
			Handler:    microService1RpcGetUserInfoHandler,
		},
		{
			A:          core.App,
			MethodName: "adduserinfo",
			Handler:    microService1AddUserInfoHandler,
		},
	},
	ServiceURI: []string{
		"/services/" + microService1Version + "/microservice1",
	},
	Metadata: "microService1.microService1",
}

func init() {}

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xd1, 0x4b, 0x3a, 0x41,
	0x10, 0x76, 0x7f, 0x9e, 0x27, 0x8e, 0xfc, 0xac, 0x46, 0xa8, 0x43, 0x28, 0x8e, 0xeb, 0xe5, 0x82,
	0x10, 0xb2, 0x87, 0x9e, 0xa3, 0x20, 0x7c, 0x31, 0xd8, 0xc8, 0xd7, 0x5a, 0x6f, 0x27, 0xb9, 0xf0,
	0x5c, 0xdd, 0x3b, 0xfb, 0x4b, 0xfb, 0x73, 0x7a, 0x88, 0x5d, 0x15, 0xdc, 0x93, 0xb4, 0xde, 0xe6,
	0x9b, 0x9d, 0x99, 0xef, 0x9b, 0x6f, 0x07, 0xda, 0x59, 0x9a, 0x68, 0xf5, 0x44, 0xfa, 0x23, 0x4d,
	0xe8, 0xaa, 0x3b, 0xd3, 0xaa, 0x50, 0xf8, 0xdf, 0x49, 0x46, 0x21, 0x78, 0x8f, 0x59, 0x5a, 0x60,
	0x00, 0x75, 0xd2, 0x3a, 0x51, 0x92, 0x02, 0x16, 0xb2, 0xb8, 0xc6, 0xd7, 0x30, 0xf2, 0xc1, 0x1b,
	0x2c, 0x26, 0x93, 0xe8, 0x02, 0x5a, 0x0f, 0x54, 0x3c, 0xe7, 0xa4, 0xfb, 0xd3, 0x37, 0xc5, 0x69,
	0x8e, 0x27, 0x50, 0x5f, 0xe4, 0xa4, 0x5f, 0x52, 0xb9, 0xea, 0xf1, 0x0d, 0xec, 0xcb, 0xe8, 0x93,
	0xc1, 0x81, 0x53, 0x9b, 0xcf, 0x7e, 0x26, 0xc0, 0x63, 0xf0, 0x49, 0xeb, 0x2c, 0x1f, 0x07, 0xff,
	0x42, 0x16, 0x37, 0xf8, 0x0a, 0xe1, 0x0d, 0x78, 0x52, 0x14, 0x22, 0xa8, 0x86, 0x2c, 0x6e, 0xf6,
	0xce, 0xbb, 0xee, 0x36, 0xa5, 0xf9, 0xdd, 0x7b, 0x51, 0x08, 0x6e, 0x1b, 0x3a, 0x43, 0xf0, 0x0c,
	0x42, 0x04, 0x6f, 0x2a, 0xb2, 0x25, 0x5f, 0x83, 0xdb, 0xd8, 0x90, 0x8d, 0x69, 0x2a, 0x49, 0xaf,
	0xc9, 0x96, 0x08, 0x0f, 0xa1, 0x2a, 0xc6, 0x64, 0xb9, 0x6a, 0xdc, 0x84, 0x26, 0xf3, 0xae, 0x46,
	0x81, 0x67, 0xcb, 0x4c, 0x18, 0x5d, 0xc2, 0x11, 0x9f, 0x25, 0xbf, 0x35, 0xe1, 0x15, 0x5a, 0xb7,
	0x52, 0x6e, 0x96, 0xee, 0xd7, 0x53, 0xfb, 0x8b, 0x9e, 0xde, 0x17, 0x03, 0xf7, 0x37, 0x71, 0x00,
	0xcd, 0x0d, 0x79, 0x78, 0xba, 0xcb, 0xb3, 0x79, 0xe7, 0x6c, 0xb7, 0xa5, 0x51, 0x05, 0x87, 0xd0,
	0x72, 0x37, 0xc6, 0xb0, 0xd4, 0xb3, 0x65, 0xc8, 0xfe, 0xa9, 0x31, 0xc3, 0x3b, 0x68, 0x6e, 0x78,
	0xb3, 0xa5, 0xd3, 0xf5, 0xad, 0xd3, 0x2e, 0x3d, 0xdb, 0x73, 0xac, 0x8c, 0x7c, 0x7b, 0xd0, 0xd7,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xb7, 0x87, 0x78, 0xe7, 0x02, 0x00, 0x00,
}
