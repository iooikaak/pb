// Code generated by WARHORSE protoc-gen-go. DO NOT EDIT EXCEPET SERVER VERSION.
// source: microService1.proto

/*
Package microService1 is a generated protocol buffer package.

It is generated from these files:

	microService1.proto

It has these top-level messages:

	Omit
	Null
	GetUserInfoReq
	GetUserInfoResp
	RpcGetUserInfoReq
	AddUserInfoReq
*/
package microService1

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Omit struct {
	Errcode int32 `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
}

func (m *Omit) Reset()                    { *m = Omit{} }
func (m *Omit) String() string            { return proto.CompactTextString(m) }
func (*Omit) ProtoMessage()               {}
func (*Omit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Omit) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetUserInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id" xml:"user_id,omitempty"`
}

func (m *GetUserInfoReq) Reset()                    { *m = GetUserInfoReq{} }
func (m *GetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoReq) ProtoMessage()               {}
func (*GetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserInfoResp struct {
	Errcode int32                 `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
	Errmsg  string                `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data    *GetUserInfoResp_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty" xml:"data,omitempty"`
}

func (m *GetUserInfoResp) Reset()                    { *m = GetUserInfoResp{} }
func (m *GetUserInfoResp) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResp) ProtoMessage()               {}
func (*GetUserInfoResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserInfoResp) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *GetUserInfoResp) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetUserInfoResp) GetData() *GetUserInfoResp_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetUserInfoResp_Data struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" xml:"name,omitempty"`
	Gender string `protobuf:"bytes,2,opt,name=gender" json:"gender,omitempty" xml:"gender,omitempty"`
	Age    int32  `protobuf:"varint,3,opt,name=age" json:"age" xml:"age,omitempty"`
	Job    string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty" xml:"job,omitempty"`
}

func (m *GetUserInfoResp_Data) Reset()                    { *m = GetUserInfoResp_Data{} }
func (m *GetUserInfoResp_Data) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoResp_Data) ProtoMessage()               {}
func (*GetUserInfoResp_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *GetUserInfoResp_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetUserInfoResp_Data) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *GetUserInfoResp_Data) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *GetUserInfoResp_Data) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

type RpcGetUserInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id" xml:"user_id,omitempty"`
}

func (m *RpcGetUserInfoReq) Reset()                    { *m = RpcGetUserInfoReq{} }
func (m *RpcGetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*RpcGetUserInfoReq) ProtoMessage()               {}
func (*RpcGetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RpcGetUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type AddUserInfoReq struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" xml:"name,omitempty"`
	Gender int32  `protobuf:"varint,2,opt,name=gender" json:"gender" xml:"gender,omitempty"`
	Age    int32  `protobuf:"varint,3,opt,name=age" json:"age" xml:"age,omitempty"`
	Job    string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty" xml:"job,omitempty"`
}

func (m *AddUserInfoReq) Reset()                    { *m = AddUserInfoReq{} }
func (m *AddUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*AddUserInfoReq) ProtoMessage()               {}
func (*AddUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddUserInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddUserInfoReq) GetGender() int32 {
	if m != nil {
		return m.Gender
	}
	return 0
}

func (m *AddUserInfoReq) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *AddUserInfoReq) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MicroService1 service

type MicroService1Client interface {
	GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error)
	RpcGetUserInfo(ctx context.Context, opts ...grpc.CallOption) (MicroService1_RpcGetUserInfoClient, error)
	AddUserInfo(ctx context.Context, in *AddUserInfoReq, opts ...grpc.CallOption) (*Null, error)
}

type microService1Client struct {
	cc *grpc.ClientConn
}

func NewMicroService1Client(cc *grpc.ClientConn) MicroService1Client {
	return &microService1Client{cc}
}

func (c *microService1Client) GetUserInfo(ctx context.Context, in *GetUserInfoReq, opts ...grpc.CallOption) (*GetUserInfoResp, error) {
	out := new(GetUserInfoResp)
	err := grpc.Invoke(ctx, "/microService1.microService1/GetUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *microService1Client) RpcGetUserInfo(ctx context.Context, opts ...grpc.CallOption) (MicroService1_RpcGetUserInfoClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MicroService1_serviceDesc.Streams[0], c.cc, "/microService1.microService1/RpcGetUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &microService1RpcGetUserInfoClient{stream}
	return x, nil
}

type MicroService1_RpcGetUserInfoClient interface {
	Send(*RpcGetUserInfoReq) error
	CloseAndRecv() (*GetUserInfoResp, error)
	grpc.ClientStream
}

type microService1RpcGetUserInfoClient struct {
	grpc.ClientStream
}

func (x *microService1RpcGetUserInfoClient) Send(m *RpcGetUserInfoReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *microService1RpcGetUserInfoClient) CloseAndRecv() (*GetUserInfoResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetUserInfoResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *microService1Client) AddUserInfo(ctx context.Context, in *AddUserInfoReq, opts ...grpc.CallOption) (*Null, error) {
	out := new(Null)
	err := grpc.Invoke(ctx, "/microService1.microService1/AddUserInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MicroService1 service

type MicroService1Server interface {
	GetUserInfo(context.Context, *GetUserInfoReq) (*GetUserInfoResp, error)
	RpcGetUserInfo(MicroService1_RpcGetUserInfoServer) error
	AddUserInfo(context.Context, *AddUserInfoReq) (*Null, error)
}

func RegisterMicroService1Server(s *grpc.Server, srv MicroService1Server) {
	s.RegisterService(&_MicroService1_serviceDesc, srv)
}

func _MicroService1_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroService1Server).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microService1.microService1/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroService1Server).GetUserInfo(ctx, req.(*GetUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MicroService1_RpcGetUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MicroService1Server).RpcGetUserInfo(&microService1RpcGetUserInfoServer{stream})
}

type MicroService1_RpcGetUserInfoServer interface {
	SendAndClose(*GetUserInfoResp) error
	Recv() (*RpcGetUserInfoReq, error)
	grpc.ServerStream
}

type microService1RpcGetUserInfoServer struct {
	grpc.ServerStream
}

func (x *microService1RpcGetUserInfoServer) SendAndClose(m *GetUserInfoResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *microService1RpcGetUserInfoServer) Recv() (*RpcGetUserInfoReq, error) {
	m := new(RpcGetUserInfoReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _MicroService1_AddUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroService1Server).AddUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/microService1.microService1/AddUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroService1Server).AddUserInfo(ctx, req.(*AddUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroService1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "microService1.microService1",
	HandlerType: (*MicroService1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfo",
			Handler:    _MicroService1_GetUserInfo_Handler,
		},
		{
			MethodName: "AddUserInfo",
			Handler:    _MicroService1_AddUserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RpcGetUserInfo",
			Handler:       _MicroService1_RpcGetUserInfo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "microService1.proto",
}

func init() {}

var fileDescriptor0 = []byte{
	// 318 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xd1, 0x4b, 0x3a, 0x41,
	0x10, 0x76, 0x7f, 0x9e, 0x27, 0x8e, 0xfc, 0xac, 0x46, 0xa8, 0x43, 0x28, 0x8e, 0xeb, 0xe5, 0x82,
	0x10, 0xb2, 0x87, 0x9e, 0xa3, 0x20, 0x7c, 0x31, 0xd8, 0xc8, 0xd7, 0x5a, 0x6f, 0x27, 0xb9, 0xf0,
	0x5c, 0xdd, 0x3b, 0xfb, 0x4b, 0xfb, 0x73, 0x7a, 0x88, 0x5d, 0x15, 0xdc, 0x93, 0xb4, 0xde, 0xe6,
	0x9b, 0x9d, 0x99, 0xef, 0x9b, 0x6f, 0x07, 0xda, 0x59, 0x9a, 0x68, 0xf5, 0x44, 0xfa, 0x23, 0x4d,
	0xe8, 0xaa, 0x3b, 0xd3, 0xaa, 0x50, 0xf8, 0xdf, 0x49, 0x46, 0x21, 0x78, 0x8f, 0x59, 0x5a, 0x60,
	0x00, 0x75, 0xd2, 0x3a, 0x51, 0x92, 0x02, 0x16, 0xb2, 0xb8, 0xc6, 0xd7, 0x30, 0xf2, 0xc1, 0x1b,
	0x2c, 0x26, 0x93, 0xe8, 0x02, 0x5a, 0x0f, 0x54, 0x3c, 0xe7, 0xa4, 0xfb, 0xd3, 0x37, 0xc5, 0x69,
	0x8e, 0x27, 0x50, 0x5f, 0xe4, 0xa4, 0x5f, 0x52, 0xb9, 0xea, 0xf1, 0x0d, 0xec, 0xcb, 0xe8, 0x93,
	0xc1, 0x81, 0x53, 0x9b, 0xcf, 0x7e, 0x26, 0xc0, 0x63, 0xf0, 0x49, 0xeb, 0x2c, 0x1f, 0x07, 0xff,
	0x42, 0x16, 0x37, 0xf8, 0x0a, 0xe1, 0x0d, 0x78, 0x52, 0x14, 0x22, 0xa8, 0x86, 0x2c, 0x6e, 0xf6,
	0xce, 0xbb, 0xee, 0x36, 0xa5, 0xf9, 0xdd, 0x7b, 0x51, 0x08, 0x6e, 0x1b, 0x3a, 0x43, 0xf0, 0x0c,
	0x42, 0x04, 0x6f, 0x2a, 0xb2, 0x25, 0x5f, 0x83, 0xdb, 0xd8, 0x90, 0x8d, 0x69, 0x2a, 0x49, 0xaf,
	0xc9, 0x96, 0x08, 0x0f, 0xa1, 0x2a, 0xc6, 0x64, 0xb9, 0x6a, 0xdc, 0x84, 0x26, 0xf3, 0xae, 0x46,
	0x81, 0x67, 0xcb, 0x4c, 0x18, 0x5d, 0xc2, 0x11, 0x9f, 0x25, 0xbf, 0x35, 0xe1, 0x15, 0x5a, 0xb7,
	0x52, 0x6e, 0x96, 0xee, 0xd7, 0x53, 0xfb, 0x8b, 0x9e, 0xde, 0x17, 0x03, 0xf7, 0x37, 0x71, 0x00,
	0xcd, 0x0d, 0x79, 0x78, 0xba, 0xcb, 0xb3, 0x79, 0xe7, 0x6c, 0xb7, 0xa5, 0x51, 0x05, 0x87, 0xd0,
	0x72, 0x37, 0xc6, 0xb0, 0xd4, 0xb3, 0x65, 0xc8, 0xfe, 0xa9, 0x31, 0xc3, 0x3b, 0x68, 0x6e, 0x78,
	0xb3, 0xa5, 0xd3, 0xf5, 0xad, 0xd3, 0x2e, 0x3d, 0xdb, 0x73, 0xac, 0x8c, 0x7c, 0x7b, 0xd0, 0xd7,
	0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xff, 0xb7, 0x87, 0x78, 0xe7, 0x02, 0x00, 0x00,
}
