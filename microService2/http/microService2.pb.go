// Code generated by WARHORSE protoc-gen-go. DO NOT EDIT EXCEPET SERVER VERSION.
// source: microService2.proto

/*
Package microService2 is a generated protocol buffer package.

It is generated from these files:

	microService2.proto

It has these top-level messages:

	Omit
	Null
	GetUserInfoReq
	GetUserInfoRep
*/
package microService2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	"context"
	"encoding/json"
	"github.com/iooikaak/frame/config"
	"github.com/iooikaak/frame/core"
	"github.com/iooikaak/frame/protocol"
	"github.com/opentracing/opentracing-go"
	"github.com/opentracing/opentracing-go/ext"
	"github.com/opentracing/opentracing-go/log"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Omit struct {
	Errcode int32 `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
}

func (m *Omit) Reset()                    { *m = Omit{} }
func (m *Omit) String() string            { return proto.CompactTextString(m) }
func (*Omit) ProtoMessage()               {}
func (*Omit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Omit) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

type Null struct {
}

func (m *Null) Reset()                    { *m = Null{} }
func (m *Null) String() string            { return proto.CompactTextString(m) }
func (*Null) ProtoMessage()               {}
func (*Null) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetUserInfoReq struct {
	UserId int32 `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id" xml:"user_id,omitempty"`
}

func (m *GetUserInfoReq) Reset()                    { *m = GetUserInfoReq{} }
func (m *GetUserInfoReq) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoReq) ProtoMessage()               {}
func (*GetUserInfoReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetUserInfoReq) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetUserInfoRep struct {
	Errcode int32                `protobuf:"varint,1,opt,name=errcode" json:"errcode" xml:"errcode,omitempty"`
	Errmsg  string               `protobuf:"bytes,2,opt,name=errmsg" json:"errmsg,omitempty" xml:"errmsg,omitempty"`
	Data    *GetUserInfoRep_Data `protobuf:"bytes,3,opt,name=data" json:"data,omitempty" xml:"data,omitempty"`
}

func (m *GetUserInfoRep) Reset()                    { *m = GetUserInfoRep{} }
func (m *GetUserInfoRep) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoRep) ProtoMessage()               {}
func (*GetUserInfoRep) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetUserInfoRep) GetErrcode() int32 {
	if m != nil {
		return m.Errcode
	}
	return 0
}

func (m *GetUserInfoRep) GetErrmsg() string {
	if m != nil {
		return m.Errmsg
	}
	return ""
}

func (m *GetUserInfoRep) GetData() *GetUserInfoRep_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

type GetUserInfoRep_Data struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty" xml:"name,omitempty"`
	Gender string `protobuf:"bytes,2,opt,name=gender" json:"gender,omitempty" xml:"gender,omitempty"`
	Age    int32  `protobuf:"varint,3,opt,name=age" json:"age" xml:"age,omitempty"`
	Job    string `protobuf:"bytes,4,opt,name=job" json:"job,omitempty" xml:"job,omitempty"`
}

func (m *GetUserInfoRep_Data) Reset()                    { *m = GetUserInfoRep_Data{} }
func (m *GetUserInfoRep_Data) String() string            { return proto.CompactTextString(m) }
func (*GetUserInfoRep_Data) ProtoMessage()               {}
func (*GetUserInfoRep_Data) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

func (m *GetUserInfoRep_Data) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetUserInfoRep_Data) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *GetUserInfoRep_Data) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *GetUserInfoRep_Data) GetJob() string {
	if m != nil {
		return m.Job
	}
	return ""
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.

// Client API for MicroService2 service
// warhorse server version,relation to server uri.
var microService2Version = core.SrvVersionName[core.SV1]

func GetUserInfo(span opentracing.Span, ctx core.Context, in *GetUserInfoReq, opts ...core.CallOption) (*GetUserInfoRep, error) {
	task, err := core.ReadyTask(ctx, "getuserinfo", "microservice2", microService2Version, in, opts...)
	if err != nil {
		return nil, err
	}
	ext.SpanKindRPCClient.Set(span)
	ext.HTTPUrl.Set(span, fmt.Sprintf("HTTP POST : %s%s", task.RemoteAddr, task.ServeURI))
	ext.HTTPMethod.Set(span, "POST")
	_ = span.Tracer().Inject(
		span.Context(),
		opentracing.TextMap,
		opentracing.TextMapCarrier(task.Header),
	)
	back, err := core.DeliverTo(task)
	if err != nil {
		return nil, err
	}

	var out GetUserInfoRep
	if err := protocol.Unpack(back.GetFormat(), back.GetBody(), &out); err != nil {
		return nil, err
	}
	go func() {
		b, _ := json.Marshal(out)
		span.LogFields(
			log.String("event", "service: MicroService2 ,method: GetUserInfo()"),
			log.String("value", string(b)),
		)
	}()
	return &out, nil
}

// MicroService2Server Server API for Hello service
type MicroService2Server interface {
	GetUserInfo(c core.Context) error
}

// RegisterMicroService2Server register MicroService2Server with etcd info
func RegisterMicroService2Server(srv MicroService2Server, cfg *config.BaseCfg) {
	core.RegisterAndServe(&microService2ServerDesc, srv, cfg)
}

// microService2 server GetUserInfo handler
func microService2GetUserInfoHandler(srv interface{}, ctx core.Context) error {
	return srv.(MicroService2Server).GetUserInfo(ctx)
}

// microService2 server describe
var microService2ServerDesc = core.ServiceDesc{
	Version:     microService2Version,
	ServiceName: "MicroService2",
	HandlerType: (*MicroService2Server)(nil),
	Methods: []core.MethodDesc{
		{
			A:          core.Stream,
			MethodName: "getuserinfo",
			Handler:    microService2GetUserInfoHandler,
		},
	},
	ServiceURI: []string{
		"/services/" + microService2Version + "/microservice2",
	},
	Metadata: "microService2.microService2",
}

func init() {}

var fileDescriptor0 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x51, 0x4b, 0xc3, 0x30,
	0x10, 0xc7, 0x8d, 0xcb, 0x3a, 0x76, 0x43, 0x91, 0x13, 0xb4, 0x0c, 0x84, 0x92, 0xa7, 0xfa, 0x32,
	0xa4, 0x82, 0x9f, 0x40, 0x90, 0xbd, 0x28, 0x46, 0xf4, 0x55, 0xd2, 0xf6, 0x2c, 0x95, 0xb5, 0xe9,
	0xae, 0x99, 0x1f, 0xd4, 0x4f, 0x24, 0xc9, 0x36, 0xb0, 0x82, 0x7b, 0xfb, 0xff, 0x2e, 0xff, 0xdc,
	0xff, 0x92, 0x83, 0xf3, 0xa6, 0x2e, 0xd8, 0xbe, 0x10, 0x7f, 0xd5, 0x05, 0x65, 0x8b, 0x8e, 0xad,
	0xb3, 0x78, 0x32, 0x28, 0xaa, 0x04, 0xe4, 0x53, 0x53, 0x3b, 0x8c, 0x61, 0x42, 0xcc, 0x85, 0x2d,
	0x29, 0x16, 0x89, 0x48, 0xc7, 0x7a, 0x8f, 0x2a, 0x02, 0xf9, 0xb8, 0x59, 0xad, 0xd4, 0x35, 0x9c,
	0x3e, 0x90, 0x7b, 0xed, 0x89, 0x97, 0xed, 0x87, 0xd5, 0xb4, 0xc6, 0x4b, 0x98, 0x6c, 0x7a, 0xe2,
	0xf7, 0xba, 0xdc, 0xdd, 0x89, 0x3c, 0x2e, 0x4b, 0xf5, 0x2d, 0xfe, 0x78, 0xbb, 0xff, 0xfb, 0xe3,
	0x05, 0x44, 0xc4, 0xdc, 0xf4, 0x55, 0x7c, 0x9c, 0x88, 0x74, 0xaa, 0x77, 0x84, 0x77, 0x20, 0x4b,
	0xe3, 0x4c, 0x3c, 0x4a, 0x44, 0x3a, 0xcb, 0xd4, 0x62, 0xf8, 0x98, 0x61, 0xfb, 0xc5, 0xbd, 0x71,
	0x46, 0x07, 0xff, 0xfc, 0x0d, 0xa4, 0x27, 0x44, 0x90, 0xad, 0x69, 0xb6, 0x71, 0x53, 0x1d, 0xb4,
	0xcf, 0xaa, 0xa8, 0x2d, 0x89, 0xf7, 0x59, 0x5b, 0xc2, 0x33, 0x18, 0x99, 0x8a, 0x42, 0xd4, 0x58,
	0x7b, 0xe9, 0x2b, 0x9f, 0x36, 0x8f, 0x65, 0xb0, 0x79, 0x99, 0xe5, 0x30, 0xfc, 0x3a, 0x7c, 0x86,
	0xd9, 0xaf, 0x29, 0xf0, 0xea, 0xd0, 0x84, 0xeb, 0xf9, 0xc1, 0xe3, 0x4e, 0x1d, 0xa5, 0xe2, 0x46,
	0xe4, 0x51, 0xd8, 0xd1, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x96, 0xcb, 0x2a, 0xba,
	0x01, 0x00, 0x00,
}
